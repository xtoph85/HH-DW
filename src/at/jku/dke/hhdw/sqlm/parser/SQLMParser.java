/* Generated By:JJTree&JavaCC: Do not edit this line. SQLMParser.java */
package at.jku.dke.sqlm.parser;

public class SQLMParser/*@bgen(jjtree)*/implements SQLMParserTreeConstants, SQLMParserConstants {/*@bgen(jjtree)*/
  protected static JJTSQLMParserState jjtree = new JJTSQLMParserState();public static void main(String args [])
  {
    System.out.println("Reading from standard input...");
    System.out.print("Enter an SQL(M) block:");

    new SQLMParser(System.in);

    try
    {
      ASTSQLMDocument n = SQLMParser.Start();

      n.dump("");

      System.out.println("Thank you.");
    }
    catch (Exception e)
    {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
    }
  }

/**
 * An M-SQL document consists of multiple M-SQL blocks.
 * The MSQLDocument class is the root of the AST.
 */
  static final public ASTSQLMDocument Start() throws ParseException {
 /*@bgen(jjtree) SQLMDocument */
  ASTSQLMDocument jjtn000 = new ASTSQLMDocument(JJTSQLMDOCUMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_CREATE:
        case K_K_ALTER:
        case K_DROP:
        case K_UPDATE:
        case K_SELECT:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        Statement();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

/* data types */

/**
 * The data length indicates the number of bytes of a variable.
 */
  static final public void DataLength() throws ParseException {
 /*@bgen(jjtree) DataLength */
  ASTDataLength jjtn000 = new ASTDataLength(JJTDATALENGTH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(S_NUMBER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/**
 * The data scale is the number of digits after the floating point.
 */
  static final public void DataScale() throws ParseException {
 /*@bgen(jjtree) DataScale */
  ASTDataScale jjtn000 = new ASTDataScale(JJTDATASCALE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(S_NUMBER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/**
 * Common SQL data types are available in M-SQL as well.
 * There is no DataType node class. Instead, the concrete
 * data types are stored as a node in the AST.
 * TODO: Future implementations of M-SQL should also
 *       support user-defined types.
 */
  static final public void DataType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_VARCHAR2:
      Varchar2Type();
      break;
    case K_NUMBER:
      NumberType();
      break;
    case S_IDENTIFIER:
      UserDefinedType();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void UserDefinedType() throws ParseException {
 /*@bgen(jjtree) UserDefinedType */
  ASTUserDefinedType jjtn000 = new ASTUserDefinedType(JJTUSERDEFINEDTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(S_IDENTIFIER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/**
 * Varchar2Type represents the SQL VARCHAR2 data type.
 */
  static final public void Varchar2Type() throws ParseException {
 /*@bgen(jjtree) Varchar2Type */
  ASTVarchar2Type jjtn000 = new ASTVarchar2Type(JJTVARCHAR2TYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(K_VARCHAR2);
      jj_consume_token(93);
      DataLength();
      jj_consume_token(94);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(t.image);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/**
 * NumberType represents the SQL VARCHAR2 data type.
 */
  static final public void NumberType() throws ParseException {
 /*@bgen(jjtree) NumberType */
  ASTNumberType jjtn000 = new ASTNumberType(JJTNUMBERTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(K_NUMBER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 93:
        jj_consume_token(93);
        DataLength();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 95:
          jj_consume_token(95);
          DataScale();
          break;
        default:
          jj_la1[2] = jj_gen;
          ;
        }
        jj_consume_token(94);
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
    jjtn000.jjtSetValue(t.image);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/* values */

/**
 * Values are organized into String and number values.
 * These two generic types are used for all variations in SQL.
 */
  static final public void Value() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case S_CHAR_LITERAL:
      StringValue();
      break;
    case S_NUMBER:
      NumberValue();
      break;
    default:
      jj_la1[4] = jj_gen;
      if (jj_2_1(2)) {
        MultilevelObjectQualifiedID();
      } else if (jj_2_2(2)) {
        ObjectCollectionConstructor();
      } else if (jj_2_3(2)) {
        ObjectConstructor();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void ObjectCollectionConstructor() throws ParseException {
 /*@bgen(jjtree) ObjectCollectionConstructor */
  ASTObjectCollectionConstructor jjtn000 = new ASTObjectCollectionConstructor(JJTOBJECTCOLLECTIONCONSTRUCTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuffer sb = new StringBuffer();
    try {
    // remember current token
    t = getToken(0);
      UserDefinedType();
      jj_consume_token(93);
      ObjectConstructorList();
      jj_consume_token(94);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    // get the string value of this production rule
    // future implementations may do more with this type
    while(t != null)
    {
      sb.append(t.image);
      t = t.next;
    }

    // this string can be used as-is for the translation into PL/SQL
        jjtn000.jjtSetValue(sb.toString());
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void ObjectConstructorList() throws ParseException {
 /*@bgen(jjtree) ObjectConstructorList */
  ASTObjectConstructorList jjtn000 = new ASTObjectConstructorList(JJTOBJECTCONSTRUCTORLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ObjectConstructor();
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 95:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_2;
        }
        jj_consume_token(95);
        ObjectConstructor();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void ObjectConstructor() throws ParseException {
 /*@bgen(jjtree) ObjectConstructor */
  ASTObjectConstructor jjtn000 = new ASTObjectConstructor(JJTOBJECTCONSTRUCTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuffer sb = new StringBuffer();
    try {
    // remember current token
    t = getToken(0);
      UserDefinedType();
      jj_consume_token(93);
      ObjectAttributeList();
      jj_consume_token(94);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    // get the string value of this production rule
    // future implementations may do more with this type
    while(t != null)
    {
      sb.append(t.image);
      t = t.next;
    }

    // this string can be used as-is for the translation into PL/SQL
        jjtn000.jjtSetValue(sb.toString());
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void ObjectAttributeList() throws ParseException {
 /*@bgen(jjtree) ObjectAttributeList */
  ASTObjectAttributeList jjtn000 = new ASTObjectAttributeList(JJTOBJECTATTRIBUTELIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Value();
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 95:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_3;
        }
        jj_consume_token(95);
        Value();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/**
 * The StringValue class stores a string literal in the 
 * node's generic value attribute.
 */
  static final public void StringValue() throws ParseException {
 /*@bgen(jjtree) StringValue */
  ASTStringValue jjtn000 = new ASTStringValue(JJTSTRINGVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(S_CHAR_LITERAL);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    // use the generic value attribute of the node.
    jjtn000.jjtSetValue(t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/**
 * The NumberValue class stores the string
 * representation of an integer or a real
 * number in the node's generic value attribute.
 */
  static final public void NumberValue() throws ParseException {
 /*@bgen(jjtree) NumberValue */
  ASTNumberValue jjtn000 = new ASTNumberValue(JJTNUMBERVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  StringBuffer sb = new StringBuffer();
    try {
      t = jj_consume_token(S_NUMBER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    sb.append(t.image);
        jjtn000.jjtSetValue(sb.toString());
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void MultilevelObjectAttributeValue() throws ParseException {
    Value();
  }

  static final public void MultilevelFactMeasureValue() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case S_NUMBER:
    case S_IDENTIFIER:
    case S_CHAR_LITERAL:
      Value();
      break;
    case K_SUM:
    case K_AVG:
    case K_MIN:
    case K_MAX:
    case K_SET_UNION:
      AggregationFunction();
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void AggregationFunction() throws ParseException {
 /*@bgen(jjtree) AggregationFunction */
  ASTAggregationFunction jjtn000 = new ASTAggregationFunction(JJTAGGREGATIONFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_SUM:
        t = jj_consume_token(K_SUM);
        break;
      case K_AVG:
        t = jj_consume_token(K_AVG);
        break;
      case K_MIN:
        t = jj_consume_token(K_MIN);
        break;
      case K_MAX:
        t = jj_consume_token(K_MAX);
        break;
      case K_SET_UNION:
        t = jj_consume_token(K_SET_UNION);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/**
 * This class represents the DEFAULT flag, which
 * indicates that the value that was set is a default
 * value. If a DEFAULT node is in the tree, it signifies
 * that the value that is assigned is a default value.
 * This node holds no value.
 */
  static final public void Default() throws ParseException {
 /*@bgen(jjtree) Default */
  ASTDefault jjtn000 = new ASTDefault(JJTDEFAULT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_DEFAULT);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/**
 * This class represents the SHARED flag, which
 * indicates that the value that was set is a shared
 * value. If a SHARED node is in the tree, it signifies
 * that the value that is assigned is a shared value.
 * This is the default setting.
 * This node holds no value.
 */
  static final public void Shared() throws ParseException {
 /*@bgen(jjtree) Shared */
  ASTShared jjtn000 = new ASTShared(JJTSHARED);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_SHARED);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void DimensionHierarchyID() throws ParseException {
 /*@bgen(jjtree) DimensionHierarchyID */
  ASTDimensionHierarchyID jjtn000 = new ASTDimensionHierarchyID(JJTDIMENSIONHIERARCHYID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(S_IDENTIFIER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void MultilevelObjectID() throws ParseException {
 /*@bgen(jjtree) MultilevelObjectID */
  ASTMultilevelObjectID jjtn000 = new ASTMultilevelObjectID(JJTMULTILEVELOBJECTID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      MultilevelObjectUnqualifiedID();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_IN:
        jj_consume_token(K_IN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_DIMENSION:
          jj_consume_token(K_DIMENSION);
          break;
        default:
          jj_la1[9] = jj_gen;
          ;
        }
        DimensionHierarchyID();
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void MultilevelObjectQualifiedID() throws ParseException {
 /*@bgen(jjtree) MultilevelObjectQualifiedID */
  ASTMultilevelObjectQualifiedID jjtn000 = new ASTMultilevelObjectQualifiedID(JJTMULTILEVELOBJECTQUALIFIEDID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      MultilevelObjectUnqualifiedID();
      jj_consume_token(K_IN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_DIMENSION:
        jj_consume_token(K_DIMENSION);
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
      DimensionHierarchyID();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void MultilevelObjectUnqualifiedID() throws ParseException {
 /*@bgen(jjtree) MultilevelObjectUnqualifiedID */
  ASTMultilevelObjectUnqualifiedID jjtn000 = new ASTMultilevelObjectUnqualifiedID(JJTMULTILEVELOBJECTUNQUALIFIEDID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(S_IDENTIFIER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void MultilevelObjectIDList() throws ParseException {
    if (jj_2_4(2)) {
      MultilevelObjectQualifiedIDList();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S_IDENTIFIER:
        MultilevelObjectUnqualifiedIDList();
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void MultilevelObjectUnqualifiedIDList() throws ParseException {
    MultilevelObjectUnqualifiedID();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 95:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_4;
      }
      jj_consume_token(95);
      MultilevelObjectUnqualifiedID();
    }
  }

  static final public void MultilevelObjectQualifiedIDList() throws ParseException {
    MultilevelObjectQualifiedID();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 95:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_5;
      }
      jj_consume_token(95);
      MultilevelObjectQualifiedID();
    }
  }

  static final public void MultilevelObjectLevelID() throws ParseException {
 /*@bgen(jjtree) MultilevelObjectLevelID */
  ASTMultilevelObjectLevelID jjtn000 = new ASTMultilevelObjectLevelID(JJTMULTILEVELOBJECTLEVELID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(S_IDENTIFIER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void MultilevelObjectLevelIDList() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case S_IDENTIFIER:
      MultilevelObjectLevelID();
      break;
    case 93:
      jj_consume_token(93);
      MultilevelObjectLevelID();
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 95:
          ;
          break;
        default:
          jj_la1[15] = jj_gen;
          break label_6;
        }
        jj_consume_token(95);
        MultilevelObjectLevelID();
      }
      jj_consume_token(94);
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void MultilevelObjectAttributeID() throws ParseException {
 /*@bgen(jjtree) MultilevelObjectAttributeID */
  ASTMultilevelObjectAttributeID jjtn000 = new ASTMultilevelObjectAttributeID(JJTMULTILEVELOBJECTATTRIBUTEID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(S_IDENTIFIER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void MultilevelCubeID() throws ParseException {
 /*@bgen(jjtree) MultilevelCubeID */
  ASTMultilevelCubeID jjtn000 = new ASTMultilevelCubeID(JJTMULTILEVELCUBEID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(S_IDENTIFIER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void MultilevelFactID() throws ParseException {
 /*@bgen(jjtree) MultilevelFactID */
  ASTMultilevelFactID jjtn000 = new ASTMultilevelFactID(JJTMULTILEVELFACTID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      MultilevelCubeCoordinate();
      jj_consume_token(K_IN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_CUBE:
        jj_consume_token(K_CUBE);
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
      MultilevelCubeID();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void MultilevelFactConnectionLevelID() throws ParseException {
 /*@bgen(jjtree) MultilevelFactConnectionLevelID */
  ASTMultilevelFactConnectionLevelID jjtn000 = new ASTMultilevelFactConnectionLevelID(JJTMULTILEVELFACTCONNECTIONLEVELID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      MultilevelObjectLevelID();
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 95:
          ;
          break;
        default:
          jj_la1[18] = jj_gen;
          break label_7;
        }
        jj_consume_token(95);
        MultilevelObjectLevelID();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void MultilevelFactMeasureID() throws ParseException {
 /*@bgen(jjtree) MultilevelFactMeasureID */
  ASTMultilevelFactMeasureID jjtn000 = new ASTMultilevelFactMeasureID(JJTMULTILEVELFACTMEASUREID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(S_IDENTIFIER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void MetalevelID() throws ParseException {
 /*@bgen(jjtree) MetalevelID */
  ASTMetalevelID jjtn000 = new ASTMetalevelID(JJTMETALEVELID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(S_IDENTIFIER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/**********/
  static final public void Statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_CREATE:
    case K_K_ALTER:
    case K_DROP:
      DDLStatement();
      break;
    case K_UPDATE:
      DMLStatement();
      break;
    case K_SELECT:
      DQLStatement();
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(96);
  }

  static final public void Block() throws ParseException {
 /*@bgen(jjtree) Block */
  ASTBlock jjtn000 = new ASTBlock(JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_BEGIN);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_CREATE:
        case K_K_ALTER:
        case K_DROP:
        case K_UPDATE:
        case K_SELECT:
          ;
          break;
        default:
          jj_la1[20] = jj_gen;
          break label_8;
        }
        Statement();
      }
      jj_consume_token(K_END);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void DDLStatement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_CREATE:
      CreateStatement();
      break;
    case K_K_ALTER:
      AlterStatement();
      break;
    case K_DROP:
      DropStatement();
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void DMLStatement() throws ParseException {
    UpdateStatement();
  }

/********* CREATE **********/
  static final public void CreateStatement() throws ParseException {
    jj_consume_token(K_CREATE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_DIMENSION:
      CreateDimension();
      break;
    case K_MULTILEVEL:
      CreateMultilevel();
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  /***** CREATE DIMENSION *****/
  static final public void CreateDimension() throws ParseException {
    jj_consume_token(K_DIMENSION);
    CreateDimensionHierarchy();
  }

  static final public void CreateDimensionHierarchy() throws ParseException {
 /*@bgen(jjtree) CreateDimensionHierarchy */
 ASTCreateDimensionHierarchy jjtn000 = new ASTCreateDimensionHierarchy(JJTCREATEDIMENSIONHIERARCHY);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(K_HIERARCHY);
      DimensionHierarchyID();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    t = getToken(0);
    jjtn000.jjtSetErrorLine(t.endLine);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void CreateMultilevelObject() throws ParseException {
 /*@bgen(jjtree) CreateMultilevelObject */
 ASTCreateMultilevelObject jjtn000 = new ASTCreateMultilevelObject(JJTCREATEMULTILEVELOBJECT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(K_OBJECT);
      MultilevelObjectQualifiedID();
      jj_consume_token(K_AT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_LEVEL:
        jj_consume_token(K_LEVEL);
        break;
      default:
        jj_la1[23] = jj_gen;
        ;
      }
      MultilevelObjectLevelID();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_UNDER:
        jj_consume_token(K_UNDER);
        MultilevelObjectParents();
        break;
      default:
        jj_la1[24] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_HIERARCHY:
        MultilevelObjectLevelHierarchy();
        break;
      default:
        jj_la1[25] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_SET:
        MultilevelObjectAttributeValueBlock();
        break;
      default:
        jj_la1[26] = jj_gen;
        ;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    t = getToken(0);
    jjtn000.jjtSetErrorLine(t.endLine);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void MultilevelObjectParents() throws ParseException {
 /*@bgen(jjtree) MultilevelObjectParents */
  ASTMultilevelObjectParents jjtn000 = new ASTMultilevelObjectParents(JJTMULTILEVELOBJECTPARENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      MultilevelObjectUnqualifiedIDList();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void MultilevelObjectLevelHierarchy() throws ParseException {
 /*@bgen(jjtree) MultilevelObjectLevelHierarchy */
  ASTMultilevelObjectLevelHierarchy jjtn000 = new ASTMultilevelObjectLevelHierarchy(JJTMULTILEVELOBJECTLEVELHIERARCHY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_HIERARCHY);
      jj_consume_token(93);
      MultilevelObjectLevelList();
      jj_consume_token(94);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void MultilevelObjectLevelList() throws ParseException {
    MultilevelObjectLevelDefinition();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 95:
        ;
        break;
      default:
        jj_la1[27] = jj_gen;
        break label_9;
      }
      jj_consume_token(95);
      MultilevelObjectLevelDefinition();
    }
  }

  static final public void MultilevelObjectLevelDefinition() throws ParseException {
 /*@bgen(jjtree) MultilevelObjectLevelDefinition */
  ASTMultilevelObjectLevelDefinition jjtn000 = new ASTMultilevelObjectLevelDefinition(JJTMULTILEVELOBJECTLEVELDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_LEVEL);
      MultilevelObjectLevelID();
      jj_consume_token(K_CHILD);
      jj_consume_token(K_OF);
      MultilevelObjectLevelParentLevels();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 93:
        jj_consume_token(93);
        MultilevelObjectLevelAttributeList();
        jj_consume_token(94);
        break;
      default:
        jj_la1[28] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void MultilevelObjectLevelParentLevels() throws ParseException {
 /*@bgen(jjtree) MultilevelObjectLevelParentLevels */
  ASTMultilevelObjectLevelParentLevels jjtn000 = new ASTMultilevelObjectLevelParentLevels(JJTMULTILEVELOBJECTLEVELPARENTLEVELS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_NULL:
        jj_consume_token(K_NULL);
        break;
      case S_IDENTIFIER:
      case 93:
        MultilevelObjectLevelIDList();
        break;
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void MultilevelObjectLevelAttributeList() throws ParseException {
    MultilevelObjectLevelAttribute();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 95:
        ;
        break;
      default:
        jj_la1[30] = jj_gen;
        break label_10;
      }
      jj_consume_token(95);
      MultilevelObjectLevelAttribute();
    }
  }

  static final public void MultilevelObjectLevelAttribute() throws ParseException {
 /*@bgen(jjtree) MultilevelObjectLevelAttribute */
  ASTMultilevelObjectLevelAttribute jjtn000 = new ASTMultilevelObjectLevelAttribute(JJTMULTILEVELOBJECTLEVELATTRIBUTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      MultilevelObjectAttributeID();
      DataType();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  /***** CREATE CUBE *****/
  static final public void CreateMultilevel() throws ParseException {
    jj_consume_token(K_MULTILEVEL);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_OBJECT:
      CreateMultilevelObject();
      break;
    case K_CUBE:
      CreateMultilevelCube();
      break;
    case K_FACT:
      CreateMultilevelFact();
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void CreateMultilevelCube() throws ParseException {
 /*@bgen(jjtree) CreateMultilevelCube */
 ASTCreateMultilevelCube jjtn000 = new ASTCreateMultilevelCube(JJTCREATEMULTILEVELCUBE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(K_CUBE);
      MultilevelCubeID();
      jj_consume_token(K_OF);
      jj_consume_token(K_DIMENSIONS);
      MultilevelObjectQualifiedIDList();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    t = getToken(0);
    jjtn000.jjtSetErrorLine(t.endLine);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void MultilevelCubeCoordinate() throws ParseException {
 /*@bgen(jjtree) MultilevelCubeCoordinate */
  ASTMultilevelCubeCoordinate jjtn000 = new ASTMultilevelCubeCoordinate(JJTMULTILEVELCUBECOORDINATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(93);
      MultilevelObjectIDList();
      jj_consume_token(94);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void CreateMultilevelFact() throws ParseException {
 /*@bgen(jjtree) CreateMultilevelFact */
 ASTCreateMultilevelFact jjtn000 = new ASTCreateMultilevelFact(JJTCREATEMULTILEVELFACT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(K_FACT);
      jj_consume_token(K_BETWEEN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_OBJECTS:
        jj_consume_token(K_OBJECTS);
        break;
      default:
        jj_la1[32] = jj_gen;
        ;
      }
      MultilevelFactID();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_HIERARCHY:
        MultilevelFactConnectionLevelHierarchy();
        break;
      default:
        jj_la1[33] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_SET:
        MultilevelFactMeasureValueBlock();
        break;
      default:
        jj_la1[34] = jj_gen;
        ;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    t = getToken(0);
    jjtn000.jjtSetErrorLine(t.endLine);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void MultilevelFactConnectionLevelHierarchy() throws ParseException {
 /*@bgen(jjtree) MultilevelFactConnectionLevelHierarchy */
  ASTMultilevelFactConnectionLevelHierarchy jjtn000 = new ASTMultilevelFactConnectionLevelHierarchy(JJTMULTILEVELFACTCONNECTIONLEVELHIERARCHY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_HIERARCHY);
      jj_consume_token(93);
      MultilevelFactConnectionLevelList();
      jj_consume_token(94);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void MultilevelFactConnectionLevelList() throws ParseException {
    MultilevelFactConnectionLevelDefinition();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 95:
        ;
        break;
      default:
        jj_la1[35] = jj_gen;
        break label_11;
      }
      jj_consume_token(95);
      MultilevelFactConnectionLevelDefinition();
    }
  }

  static final public void MultilevelFactConnectionLevelDefinition() throws ParseException {
 /*@bgen(jjtree) MultilevelFactConnectionLevelDefinition */
  ASTMultilevelFactConnectionLevelDefinition jjtn000 = new ASTMultilevelFactConnectionLevelDefinition(JJTMULTILEVELFACTCONNECTIONLEVELDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_CONNECTION);
      jj_consume_token(K_LEVEL);
      jj_consume_token(97);
      MultilevelFactConnectionLevelID();
      jj_consume_token(98);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 93:
        jj_consume_token(93);
        MultilevelFactConnectionLevelMeasureList();
        jj_consume_token(94);
        break;
      default:
        jj_la1[36] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void MultilevelFactConnectionLevelMeasureList() throws ParseException {
    MultilevelFactConnectionLevelMeasure();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 95:
        ;
        break;
      default:
        jj_la1[37] = jj_gen;
        break label_12;
      }
      jj_consume_token(95);
      MultilevelFactConnectionLevelMeasure();
    }
  }

  static final public void MultilevelFactConnectionLevelMeasure() throws ParseException {
 /*@bgen(jjtree) MultilevelFactConnectionLevelMeasure */
  ASTMultilevelFactConnectionLevelMeasure jjtn000 = new ASTMultilevelFactConnectionLevelMeasure(JJTMULTILEVELFACTCONNECTIONLEVELMEASURE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      MultilevelFactMeasureID();
      DataType();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/***************************/

/********* ALTER **********/
  static final public void AlterStatement() throws ParseException {
    jj_consume_token(K_K_ALTER);
    AlterMultilevel();
  }

  /***** ALTER DIMENSION *****/
  static final public void AlterMultilevel() throws ParseException {
    jj_consume_token(K_MULTILEVEL);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_OBJECT:
      AlterMultilevelObject();
      break;
    case K_FACT:
      AlterMultilevelFact();
      break;
    default:
      jj_la1[38] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void AlterMultilevelObject() throws ParseException {
 /*@bgen(jjtree) AlterMultilevelObject */
 ASTAlterMultilevelObject jjtn000 = new ASTAlterMultilevelObject(JJTALTERMULTILEVELOBJECT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(K_OBJECT);
      MultilevelObjectQualifiedID();
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_DROP:
        case K_ADD:
          ;
          break;
        default:
          jj_la1[39] = jj_gen;
          break label_13;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_ADD:
          AlterMultilevelObjectAddAttribute();
          break;
        case K_DROP:
          AlterMultilevelObjectDropAttribute();
          break;
        default:
          jj_la1[40] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    t = getToken(0);
    jjtn000.jjtSetErrorLine(t.endLine);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void AlterMultilevelObjectAddAttribute() throws ParseException {
 /*@bgen(jjtree) AlterMultilevelObjectAddAttribute */
  ASTAlterMultilevelObjectAddAttribute jjtn000 = new ASTAlterMultilevelObjectAddAttribute(JJTALTERMULTILEVELOBJECTADDATTRIBUTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_ADD);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ATTRIBUTE:
        jj_consume_token(K_ATTRIBUTE);
        break;
      default:
        jj_la1[41] = jj_gen;
        ;
      }
      MultilevelObjectAttributeList();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void AlterMultilevelObjectDropAttribute() throws ParseException {
 /*@bgen(jjtree) AlterMultilevelObjectDropAttribute */
  ASTAlterMultilevelObjectDropAttribute jjtn000 = new ASTAlterMultilevelObjectDropAttribute(JJTALTERMULTILEVELOBJECTDROPATTRIBUTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_DROP);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ATTRIBUTE:
        jj_consume_token(K_ATTRIBUTE);
        break;
      default:
        jj_la1[42] = jj_gen;
        ;
      }
      MultilevelObjectAttributeID();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void MultilevelObjectAttributeList() throws ParseException {
    MultilevelObjectLevelAttribute();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 95:
        ;
        break;
      default:
        jj_la1[43] = jj_gen;
        break label_14;
      }
      jj_consume_token(95);
      MultilevelObjectLevelAttribute();
    }
    jj_consume_token(K_AT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_LEVEL:
      jj_consume_token(K_LEVEL);
      break;
    default:
      jj_la1[44] = jj_gen;
      ;
    }
    MultilevelObjectLevelID();
  }

  /***** ALTER CUBE *****/
  static final public void AlterCube() throws ParseException {
    jj_consume_token(K_MULTILEVEL);
  }

  static final public void AlterMultilevelFact() throws ParseException {
 /*@bgen(jjtree) AlterMultilevelFact */
 ASTAlterMultilevelFact jjtn000 = new ASTAlterMultilevelFact(JJTALTERMULTILEVELFACT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(K_FACT);
      jj_consume_token(K_BETWEEN);
      jj_consume_token(K_OBJECTS);
      MultilevelFactID();
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_ADD:
          AlterMultilevelFactAddMeasure();
          break;
        case K_DROP:
          AlterMultilevelFactDropMeasure();
          break;
        default:
          jj_la1[45] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_DROP:
        case K_ADD:
          ;
          break;
        default:
          jj_la1[46] = jj_gen;
          break label_15;
        }
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    t = getToken(0);
    jjtn000.jjtSetErrorLine(t.endLine);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void AlterMultilevelFactAddMeasure() throws ParseException {
 /*@bgen(jjtree) AlterMultilevelFactAddMeasure */
  ASTAlterMultilevelFactAddMeasure jjtn000 = new ASTAlterMultilevelFactAddMeasure(JJTALTERMULTILEVELFACTADDMEASURE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_ADD);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_MEASURE:
        jj_consume_token(K_MEASURE);
        break;
      default:
        jj_la1[47] = jj_gen;
        ;
      }
      MultilevelFactMeasureList();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void AlterMultilevelFactDropMeasure() throws ParseException {
 /*@bgen(jjtree) AlterMultilevelFactDropMeasure */
  ASTAlterMultilevelFactDropMeasure jjtn000 = new ASTAlterMultilevelFactDropMeasure(JJTALTERMULTILEVELFACTDROPMEASURE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_DROP);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_MEASURE:
        jj_consume_token(K_MEASURE);
        break;
      default:
        jj_la1[48] = jj_gen;
        ;
      }
      MultilevelFactMeasureID();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void MultilevelFactMeasureList() throws ParseException {
    MultilevelFactConnectionLevelMeasure();
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 95:
        ;
        break;
      default:
        jj_la1[49] = jj_gen;
        break label_16;
      }
      jj_consume_token(95);
      MultilevelFactConnectionLevelMeasure();
    }
    jj_consume_token(K_AT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_CONNECTION:
      jj_consume_token(K_CONNECTION);
      jj_consume_token(K_LEVEL);
      break;
    default:
      jj_la1[50] = jj_gen;
      ;
    }
    jj_consume_token(97);
    MultilevelFactConnectionLevelID();
    jj_consume_token(98);
  }

/*************************/


/********* DROP **********/
  static final public void DropStatement() throws ParseException {
    jj_consume_token(K_DROP);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_DIMENSION:
      DropDimension();
      break;
    case K_MULTILEVEL:
      DropMultilevel();
      break;
    default:
      jj_la1[51] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  /***** DROP DIMENSION *****/
  static final public void DropDimension() throws ParseException {
    jj_consume_token(K_DIMENSION);
    DropDimensionHierarchy();
  }

  static final public void DropDimensionHierarchy() throws ParseException {
 /*@bgen(jjtree) DropDimensionHierarchy */
 ASTDropDimensionHierarchy jjtn000 = new ASTDropDimensionHierarchy(JJTDROPDIMENSIONHIERARCHY);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(K_HIERARCHY);
      DimensionHierarchyID();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    t = getToken(0);
    jjtn000.jjtSetErrorLine(t.endLine);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void DropMultilevelObject() throws ParseException {
 /*@bgen(jjtree) DropMultilevelObject */
 ASTDropMultilevelObject jjtn000 = new ASTDropMultilevelObject(JJTDROPMULTILEVELOBJECT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(K_OBJECT);
      MultilevelObjectQualifiedID();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    t = getToken(0);
    jjtn000.jjtSetErrorLine(t.endLine);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  /***** DROP CUBE *****/
  static final public void DropMultilevel() throws ParseException {
    jj_consume_token(K_MULTILEVEL);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_OBJECT:
      DropMultilevelObject();
      break;
    case K_CUBE:
      DropMultilevelCube();
      break;
    case K_FACT:
      DropMultilevelFact();
      break;
    default:
      jj_la1[52] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void DropMultilevelCube() throws ParseException {
 /*@bgen(jjtree) DropMultilevelCube */
 ASTDropMultilevelCube jjtn000 = new ASTDropMultilevelCube(JJTDROPMULTILEVELCUBE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(K_CUBE);
      MultilevelCubeID();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    t = getToken(0);
    jjtn000.jjtSetErrorLine(t.endLine);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void DropMultilevelFact() throws ParseException {
 /*@bgen(jjtree) DropMultilevelFact */
 ASTDropMultilevelFact jjtn000 = new ASTDropMultilevelFact(JJTDROPMULTILEVELFACT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(K_FACT);
      jj_consume_token(K_BETWEEN);
      jj_consume_token(K_OBJECTS);
      MultilevelFactID();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    t = getToken(0);
    jjtn000.jjtSetErrorLine(t.endLine);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/***************************/


/********* UPDATE **********/
  static final public void UpdateStatement() throws ParseException {
    jj_consume_token(K_UPDATE);
    UpdateMultilevel();
  }

  static final public void UpdateMultilevel() throws ParseException {
    jj_consume_token(K_MULTILEVEL);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_OBJECT:
      UpdateMultilevelObject();
      break;
    case K_FACT:
      UpdateMultilevelFact();
      break;
    default:
      jj_la1[53] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void UpdateMultilevelObject() throws ParseException {
 /*@bgen(jjtree) UpdateMultilevelObject */
 ASTUpdateMultilevelObject jjtn000 = new ASTUpdateMultilevelObject(JJTUPDATEMULTILEVELOBJECT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(K_OBJECT);
      MultilevelObjectQualifiedID();
      MultilevelObjectAttributeValueBlock();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    t = getToken(0);
    jjtn000.jjtSetErrorLine(t.endLine);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void MultilevelObjectAttributeValueAssignment() throws ParseException {
 /*@bgen(jjtree) MultilevelObjectAttributeValueAssignment */
  ASTMultilevelObjectAttributeValueAssignment jjtn000 = new ASTMultilevelObjectAttributeValueAssignment(JJTMULTILEVELOBJECTATTRIBUTEVALUEASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      MultilevelObjectAttributeID();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 99:
        jj_consume_token(99);
        MetalevelID();
        break;
      default:
        jj_la1[54] = jj_gen;
        ;
      }
      jj_consume_token(100);
      MultilevelObjectAttributeValue();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_DEFAULT:
      case K_SHARED:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_DEFAULT:
          Default();
          break;
        case K_SHARED:
          Shared();
          break;
        default:
          jj_la1[55] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[56] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void UpdateMultilevelFact() throws ParseException {
 /*@bgen(jjtree) UpdateMultilevelFact */
 ASTUpdateMultilevelFact jjtn000 = new ASTUpdateMultilevelFact(JJTUPDATEMULTILEVELFACT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(K_FACT);
      jj_consume_token(K_BETWEEN);
      jj_consume_token(K_OBJECTS);
      MultilevelFactID();
      MultilevelFactMeasureValueBlock();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    t = getToken(0);
    jjtn000.jjtSetErrorLine(t.endLine);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void MultilevelFactMeasureValueAssignment() throws ParseException {
 /*@bgen(jjtree) MultilevelFactMeasureValueAssignment */
  ASTMultilevelFactMeasureValueAssignment jjtn000 = new ASTMultilevelFactMeasureValueAssignment(JJTMULTILEVELFACTMEASUREVALUEASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      MultilevelFactMeasureID();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 99:
        jj_consume_token(99);
        MetalevelID();
        break;
      default:
        jj_la1[57] = jj_gen;
        ;
      }
      jj_consume_token(100);
      MultilevelFactMeasureValue();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_DEFAULT:
      case K_SHARED:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_DEFAULT:
          Default();
          break;
        case K_SHARED:
          Shared();
          break;
        default:
          jj_la1[58] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[59] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  /***** BULK Statements *****/
  static final public void BulkCreateMultilevelObject() throws ParseException {
 /*@bgen(jjtree) BulkCreateMultilevelObject */
  ASTBulkCreateMultilevelObject jjtn000 = new ASTBulkCreateMultilevelObject(JJTBULKCREATEMULTILEVELOBJECT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_BULK);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void BulkUpdateMultilevelObject() throws ParseException {
 /*@bgen(jjtree) BulkUpdateMultilevelObject */
  ASTBulkUpdateMultilevelObject jjtn000 = new ASTBulkUpdateMultilevelObject(JJTBULKUPDATEMULTILEVELOBJECT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_BULK:
          ;
          break;
        default:
          jj_la1[60] = jj_gen;
          break label_17;
        }
        BulkUpdateMultilevelObjectBlock();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void BulkUpdateMultilevelObjectBlock() throws ParseException {
 /*@bgen(jjtree) BulkUpdateMultilevelObjectBlock */
  ASTBulkUpdateMultilevelObjectBlock jjtn000 = new ASTBulkUpdateMultilevelObjectBlock(JJTBULKUPDATEMULTILEVELOBJECTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_BULK);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void BulkCreateMultilevelFact() throws ParseException {
 /*@bgen(jjtree) BulkCreateMultilevelFact */
  ASTBulkCreateMultilevelFact jjtn000 = new ASTBulkCreateMultilevelFact(JJTBULKCREATEMULTILEVELFACT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_BULK);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void BulkUpdateMultilevelFact() throws ParseException {
 /*@bgen(jjtree) BulkUpdateMultilevelFact */
  ASTBulkUpdateMultilevelFact jjtn000 = new ASTBulkUpdateMultilevelFact(JJTBULKUPDATEMULTILEVELFACT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_BULK:
          ;
          break;
        default:
          jj_la1[61] = jj_gen;
          break label_18;
        }
        BulkUpdateMultilevelFactBlock();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void BulkUpdateMultilevelFactBlock() throws ParseException {
 /*@bgen(jjtree) BulkUpdateMultilevelFactBlock */
  ASTBulkUpdateMultilevelFactBlock jjtn000 = new ASTBulkUpdateMultilevelFactBlock(JJTBULKUPDATEMULTILEVELFACTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_BULK);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void MultilevelObjectAttributeValueBlock() throws ParseException {
 /*@bgen(jjtree) MultilevelObjectAttributeValueBlock */
  ASTMultilevelObjectAttributeValueBlock jjtn000 = new ASTMultilevelObjectAttributeValueBlock(JJTMULTILEVELOBJECTATTRIBUTEVALUEBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_SET);
      MultilevelObjectAttributeValueAssignment();
      label_19:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 95:
          ;
          break;
        default:
          jj_la1[62] = jj_gen;
          break label_19;
        }
        jj_consume_token(95);
        MultilevelObjectAttributeValueAssignment();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void MultilevelFactMeasureValueBlock() throws ParseException {
 /*@bgen(jjtree) MultilevelFactMeasureValueBlock */
  ASTMultilevelFactMeasureValueBlock jjtn000 = new ASTMultilevelFactMeasureValueBlock(JJTMULTILEVELFACTMEASUREVALUEBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_SET);
      MultilevelFactMeasureValueAssignment();
      label_20:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 95:
          ;
          break;
        default:
          jj_la1[63] = jj_gen;
          break label_20;
        }
        jj_consume_token(95);
        MultilevelFactMeasureValueAssignment();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void DQLStatement() throws ParseException {
    if (jj_2_5(2)) {
      ClosedMCubeQuery();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_SELECT:
        SQLSelectStatement();
        break;
      default:
        jj_la1[64] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void ClosedMCubeQuery() throws ParseException {
 /*@bgen(jjtree) #ClosedMCubeQuery(true) */
  ASTClosedMCubeQuery jjtn000 = new ASTClosedMCubeQuery(JJTCLOSEDMCUBEQUERY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_SELECT);
      jj_consume_token(K_MULTILEVEL);
      ProjectionBlock();
      jj_consume_token(K_FROM);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_DICE:
        DiceBlock();
        break;
      case S_IDENTIFIER:
      case 93:
        CubeBlock();
        break;
      default:
        jj_la1[65] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_WHERE:
        jj_consume_token(K_WHERE);
        SliceBlock();
        break;
      default:
        jj_la1[66] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void DiceBlock() throws ParseException {
 /*@bgen(jjtree) DiceBlock */
  ASTDiceBlock jjtn000 = new ASTDiceBlock(JJTDICEBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_DICE);
      jj_consume_token(101);
      DiceMultilevelObjectIDList();
      jj_consume_token(102);
      jj_consume_token(93);
      InputCubeBlock();
      jj_consume_token(94);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S_IDENTIFIER:
        CubeAlias();
        break;
      default:
        jj_la1[67] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void CubeBlock() throws ParseException {
 /*@bgen(jjtree) CubeBlock */
  ASTCubeBlock jjtn000 = new ASTCubeBlock(JJTCUBEBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S_IDENTIFIER:
        MultilevelCubeID();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S_IDENTIFIER:
          CubeAlias();
          break;
        default:
          jj_la1[68] = jj_gen;
          ;
        }
        break;
      case 93:
        jj_consume_token(93);
        ClosedMCubeQuery();
        jj_consume_token(94);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S_IDENTIFIER:
          CubeAlias();
          break;
        default:
          jj_la1[69] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[70] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void DiceMultilevelObjectIDList() throws ParseException {
 /*@bgen(jjtree) DiceMultilevelObjectIDList */
  ASTDiceMultilevelObjectIDList jjtn000 = new ASTDiceMultilevelObjectIDList(JJTDICEMULTILEVELOBJECTIDLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      MultilevelObjectIDList();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void InputCubeBlock() throws ParseException {
 /*@bgen(jjtree) InputCubeBlock */
  ASTInputCubeBlock jjtn000 = new ASTInputCubeBlock(JJTINPUTCUBEBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S_IDENTIFIER:
        MultilevelCubeID();
        break;
      case K_SELECT:
        ClosedMCubeQuery();
        break;
      default:
        jj_la1[71] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void SliceBlock() throws ParseException {
 /*@bgen(jjtree) SliceBlock */
  ASTSliceBlock jjtn000 = new ASTSliceBlock(JJTSLICEBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S_IDENTIFIER:
        SliceExpression();
        break;
      case K_CONVERT_TO:
        SliceConversionExpression();
        break;
      default:
        jj_la1[72] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_21:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_AND:
          ;
          break;
        default:
          jj_la1[73] = jj_gen;
          break label_21;
        }
        jj_consume_token(K_AND);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S_IDENTIFIER:
          SliceExpression();
          break;
        case K_CONVERT_TO:
          SliceConversionExpression();
          break;
        default:
          jj_la1[74] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void SliceExpression() throws ParseException {
 /*@bgen(jjtree) SliceExpression */
  ASTSliceExpression jjtn000 = new ASTSliceExpression(JJTSLICEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SliceExpressionPath();
      ComparisonOperator();
      Value();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void ProjectionBlock() throws ParseException {
 /*@bgen(jjtree) ProjectionBlock */
  ASTProjectionBlock jjtn000 = new ASTProjectionBlock(JJTPROJECTIONBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S_IDENTIFIER:
        if (jj_2_6(2)) {
          CubeAlias();
          jj_consume_token(99);
        } else {
          ;
        }
        MultilevelFactMeasureID();
        label_22:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 95:
            ;
            break;
          default:
            jj_la1[75] = jj_gen;
            break label_22;
          }
          jj_consume_token(95);
          if (jj_2_7(2)) {
            CubeAlias();
            jj_consume_token(99);
          } else {
            ;
          }
          MultilevelFactMeasureID();
        }
        break;
      case 103:
        jj_consume_token(103);
        break;
      default:
        jj_la1[76] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void CubeAlias() throws ParseException {
 /*@bgen(jjtree) CubeAlias */
  ASTCubeAlias jjtn000 = new ASTCubeAlias(JJTCUBEALIAS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(S_IDENTIFIER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void SliceExpressionPath() throws ParseException {
 /*@bgen(jjtree) SliceExpressionPath */
  ASTSliceExpressionPath jjtn000 = new ASTSliceExpressionPath(JJTSLICEEXPRESSIONPATH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_8(2)) {
        CubeAlias();
        jj_consume_token(99);
      } else {
        ;
      }
      DimensionHierarchyID();
      jj_consume_token(99);
      MultilevelObjectLevelID();
      jj_consume_token(99);
      MultilevelObjectAttributeID();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void RollupExpression() throws ParseException {
 /*@bgen(jjtree) RollupExpression */
  ASTRollupExpression jjtn000 = new ASTRollupExpression(JJTROLLUPEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_ROLLUP);
      jj_consume_token(101);
      MeasureLevelPathList();
      jj_consume_token(102);
      jj_consume_token(93);
      InputCubeBlock();
      jj_consume_token(94);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_CONVERT:
        RollupUnitConversionList();
        break;
      default:
        jj_la1[77] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void MeasureLevelPathList() throws ParseException {
 /*@bgen(jjtree) MeasureLevelPathList */
  ASTMeasureLevelPathList jjtn000 = new ASTMeasureLevelPathList(JJTMEASURELEVELPATHLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      MeasureLevelPath();
      label_23:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 95:
          ;
          break;
        default:
          jj_la1[78] = jj_gen;
          break label_23;
        }
        jj_consume_token(95);
        MeasureLevelPath();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void MeasureLevelPath() throws ParseException {
 /*@bgen(jjtree) MeasureLevelPath */
  ASTMeasureLevelPath jjtn000 = new ASTMeasureLevelPath(JJTMEASURELEVELPATH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      DimensionHierarchyID();
      jj_consume_token(99);
      MultilevelObjectLevelID();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void RollupUnitConversionList() throws ParseException {
 /*@bgen(jjtree) RollupUnitConversionList */
  ASTRollupUnitConversionList jjtn000 = new ASTRollupUnitConversionList(JJTROLLUPUNITCONVERSIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_CONVERT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_MEASURE:
        jj_consume_token(K_MEASURE);
        break;
      default:
        jj_la1[79] = jj_gen;
        ;
      }
      RollupUnitConversion();
      label_24:
      while (true) {
        if (jj_2_9(2)) {
          ;
        } else {
          break label_24;
        }
        jj_consume_token(95);
        RollupUnitConversion();
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  static final public void RollupUnitConversion() throws ParseException {
 /*@bgen(jjtree) RollupUnitConversion */
  ASTRollupUnitConversion jjtn000 = new ASTRollupUnitConversion(JJTROLLUPUNITCONVERSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      MultilevelFactMeasureIdList();
      jj_consume_token(K_TO);
      MeasureUnit();
      jj_consume_token(K_USING);
      MeasureUnitConversionRule();
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  static final public void MultilevelFactMeasureIdList() throws ParseException {
 /*@bgen(jjtree) MultilevelFactMeasureIdList */
  ASTMultilevelFactMeasureIdList jjtn000 = new ASTMultilevelFactMeasureIdList(JJTMULTILEVELFACTMEASUREIDLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      MultilevelFactMeasureID();
      label_25:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 95:
          ;
          break;
        default:
          jj_la1[80] = jj_gen;
          break label_25;
        }
        jj_consume_token(95);
        MultilevelFactMeasureID();
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  static final public void MeasureUnit() throws ParseException {
 /*@bgen(jjtree) MeasureUnit */
  ASTMeasureUnit jjtn000 = new ASTMeasureUnit(JJTMEASUREUNIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S_NUMBER:
        NumberValue();
        break;
      case S_CHAR_LITERAL:
        StringValue();
        break;
      case S_IDENTIFIER:
        MultilevelObjectQualifiedID();
        break;
      default:
        jj_la1[81] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void MeasureUnitConversionRule() throws ParseException {
 /*@bgen(jjtree) MeasureUnitConversionRule */
  ASTMeasureUnitConversionRule jjtn000 = new ASTMeasureUnitConversionRule(JJTMEASUREUNITCONVERSIONRULE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      MultilevelCubeID();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void SliceConversionExpression() throws ParseException {
 /*@bgen(jjtree) SliceConversionExpression */
  ASTSliceConversionExpression jjtn000 = new ASTSliceConversionExpression(JJTSLICECONVERSIONEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_CONVERT_TO);
      jj_consume_token(93);
      SliceExpressionPath();
      jj_consume_token(95);
      AttributeUnit();
      jj_consume_token(95);
      AttributeUnitConversionRule();
      jj_consume_token(94);
      ComparisonOperator();
      Value();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void AttributeUnit() throws ParseException {
 /*@bgen(jjtree) AttributeUnit */
  ASTAttributeUnit jjtn000 = new ASTAttributeUnit(JJTATTRIBUTEUNIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S_CHAR_LITERAL:
        StringValue();
        break;
      case S_IDENTIFIER:
        MultilevelObjectQualifiedID();
        break;
      default:
        jj_la1[82] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void AttributeUnitConversionRule() throws ParseException {
 /*@bgen(jjtree) AttributeUnitConversionRule */
  ASTAttributeUnitConversionRule jjtn000 = new ASTAttributeUnitConversionRule(JJTATTRIBUTEUNITCONVERSIONRULE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      MultilevelCubeID();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void ComparisonOperator() throws ParseException {
 /*@bgen(jjtree) ComparisonOperator */
  ASTComparisonOperator jjtn000 = new ASTComparisonOperator(JJTCOMPARISONOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 100:
        t = jj_consume_token(100);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(t.image);
        break;
      case 98:
        t = jj_consume_token(98);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(t.image);
        break;
      case 104:
        t = jj_consume_token(104);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(t.image);
        break;
      case 97:
        t = jj_consume_token(97);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(t.image);
        break;
      case 105:
        t = jj_consume_token(105);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(t.image);
        break;
      case K_LIKE:
        t = jj_consume_token(K_LIKE);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetValue(t.image);
        break;
      default:
        jj_la1[83] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/********************************************************************************/
/********************************************************************************/
/* --------------------------- SQL Grammar ------------------------------------ */
/* Adapted from http://java.net/downloads/javacc/contrib/grammars/FormsPlSql.jj */
/* and http://java.net/downloads/javacc/contrib/grammars/PlSql.jj               */
/********************************************************************************/
/********************************************************************************/
  static final public void TableColumn() throws ParseException {
    OracleObjectName();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 99:
      jj_consume_token(99);
      OracleObjectName();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 99:
        jj_consume_token(99);
        OracleObjectName();
        break;
      default:
        jj_la1[84] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[85] = jj_gen;
      ;
    }
  }

  static final public void OracleObjectName() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case S_IDENTIFIER:
      jj_consume_token(S_IDENTIFIER);
      break;
    case S_QUOTED_IDENTIFIER:
      jj_consume_token(S_QUOTED_IDENTIFIER);
      break;
    default:
      jj_la1[86] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void TableReference() throws ParseException {
    OracleObjectName();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 99:
      jj_consume_token(99);
      OracleObjectName();
      break;
    default:
      jj_la1[87] = jj_gen;
      ;
    }
  }

  static final public void NumOrID() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case S_IDENTIFIER:
      jj_consume_token(S_IDENTIFIER);
      break;
    case S_NUMBER:
    case 106:
    case 107:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 106:
      case 107:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 106:
          jj_consume_token(106);
          break;
        case 107:
          jj_consume_token(107);
          break;
        default:
          jj_la1[88] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[89] = jj_gen;
        ;
      }
      jj_consume_token(S_NUMBER);
      break;
    default:
      jj_la1[90] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void SQLSelectStatement() throws ParseException {
 /*@bgen(jjtree) SQLSelectStatement */
  ASTSQLSelectStatement jjtn000 = new ASTSQLSelectStatement(JJTSQLSELECTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token cur;
  StringBuffer sb = new StringBuffer();
    try {
      cur = getToken(1);
      SelectWithoutOrder();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ORDER:
        OrderByClause();
        break;
      default:
        jj_la1[91] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_FOR:
        ForUpdateClause();
        break;
      default:
        jj_la1[92] = jj_gen;
        ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      for(; cur != null; cur = cur.next){
        sb.append(cur.image + " ");
      }

      jjtn000.jjtSetValue(sb.toString());
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void SelectWithoutOrder() throws ParseException {
    jj_consume_token(K_SELECT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_DISTINCT:
    case K_ALL:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ALL:
        jj_consume_token(K_ALL);
        break;
      case K_DISTINCT:
        jj_consume_token(K_DISTINCT);
        break;
      default:
        jj_la1[93] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[94] = jj_gen;
      ;
    }
    SelectList();
    FromClause();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_WHERE:
      WhereClause();
      break;
    default:
      jj_la1[95] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_START:
    case K_CONNECT:
      ConnectClause();
      break;
    default:
      jj_la1[96] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_GROUP:
      GroupByClause();
      break;
    default:
      jj_la1[97] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_MINUS:
    case K_INTERSECT:
    case K_UNION:
      SetClause();
      break;
    default:
      jj_la1[98] = jj_gen;
      ;
    }
  }

/* Checks for whatever follows  SELECT */
  static final public void SelectList() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 103:
      jj_consume_token(103);
      break;
    case K_NULL:
    case S_NUMBER:
    case S_IDENTIFIER:
    case S_BIND:
    case S_CHAR_LITERAL:
    case S_QUOTED_IDENTIFIER:
    case 93:
    case 106:
    case 107:
      SelectItem();
      label_26:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 95:
          ;
          break;
        default:
          jj_la1[99] = jj_gen;
          break label_26;
        }
        jj_consume_token(95);
        SelectItem();
      }
      break;
    default:
      jj_la1[100] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void SelectItem() throws ParseException {
    if (jj_2_10(2)) {
      OracleObjectName();
      jj_consume_token(108);
    } else if (jj_2_11(4)) {
      OracleObjectName();
      jj_consume_token(99);
      OracleObjectName();
      jj_consume_token(108);
    } else if (jj_2_12(2)) {
      SQLSimpleExpression();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 93:
        jj_consume_token(93);
        SubQuery();
        jj_consume_token(94);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S_IDENTIFIER:
          jj_consume_token(S_IDENTIFIER);
          break;
        default:
          jj_la1[101] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[102] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void FromClause() throws ParseException {
    jj_consume_token(K_FROM);
    FromItem();
    label_27:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 95:
        ;
        break;
      default:
        jj_la1[103] = jj_gen;
        break label_27;
      }
      jj_consume_token(95);
      FromItem();
    }
  }

  static final public void FromItem() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case S_IDENTIFIER:
    case S_QUOTED_IDENTIFIER:
      TableReference();
      label_28:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_FULL:
        case K_LEFT:
        case K_RIGHT:
        case K_INNER:
          ;
          break;
        default:
          jj_la1[104] = jj_gen;
          break label_28;
        }
        Join();
      }
      break;
    case 93:
      jj_consume_token(93);
      SubQuery();
      jj_consume_token(94);
      break;
    case K_ROLLUP:
                  t = getToken(1);
      RollupExpression();
              // The token that holds the ROLLUP keyword shall point
              // to the first token after the RollupExpression production.
              // When later the SQL string is built, only the standard
              // SQL code is included, and the ROLLUP keyword can be
              // replaced by a table name.
              t.next = getToken(1);
      break;
    default:
      jj_la1[105] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case S_IDENTIFIER:
      jj_consume_token(S_IDENTIFIER);
      break;
    default:
      jj_la1[106] = jj_gen;
      ;
    }
  }

  static final public void WhereClause() throws ParseException {
    jj_consume_token(K_WHERE);
    SQLExpression();
  }

  static final public void ConnectClause() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_START:
      jj_consume_token(K_START);
      jj_consume_token(K_WITH);
      SQLExpression();
      break;
    default:
      jj_la1[107] = jj_gen;
      ;
    }
    jj_consume_token(K_CONNECT);
    jj_consume_token(K_BY);
    SQLExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_START:
      jj_consume_token(K_START);
      jj_consume_token(K_WITH);
      SQLExpression();
      break;
    default:
      jj_la1[108] = jj_gen;
      ;
    }
  }

  static final public void GroupByClause() throws ParseException {
    jj_consume_token(K_GROUP);
    jj_consume_token(K_BY);
    SQLExpressionList();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_HAVING:
      jj_consume_token(K_HAVING);
      SQLExpression();
      break;
    default:
      jj_la1[109] = jj_gen;
      ;
    }
  }

  static final public void SetClause() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_UNION:
      jj_consume_token(K_UNION);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ALL:
        jj_consume_token(K_ALL);
        break;
      default:
        jj_la1[110] = jj_gen;
        ;
      }
      break;
    case K_INTERSECT:
      jj_consume_token(K_INTERSECT);
      break;
    case K_MINUS:
      jj_consume_token(K_MINUS);
      break;
    default:
      jj_la1[111] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    if (jj_2_13(2147483647)) {
      jj_consume_token(93);
      SelectWithoutOrder();
      jj_consume_token(94);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_SELECT:
        SelectWithoutOrder();
        break;
      default:
        jj_la1[112] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void OrderByClause() throws ParseException {
    jj_consume_token(K_ORDER);
    jj_consume_token(K_BY);
    SQLSimpleExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_ASC:
    case K_DESC:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ASC:
        jj_consume_token(K_ASC);
        break;
      case K_DESC:
        jj_consume_token(K_DESC);
        break;
      default:
        jj_la1[113] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[114] = jj_gen;
      ;
    }
    label_29:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 95:
        ;
        break;
      default:
        jj_la1[115] = jj_gen;
        break label_29;
      }
      jj_consume_token(95);
      SQLSimpleExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ASC:
      case K_DESC:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_ASC:
          jj_consume_token(K_ASC);
          break;
        case K_DESC:
          jj_consume_token(K_DESC);
          break;
        default:
          jj_la1[116] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[117] = jj_gen;
        ;
      }
    }
  }

  static final public void ForUpdateClause() throws ParseException {
    jj_consume_token(K_FOR);
    jj_consume_token(K_UPDATE);
    jj_consume_token(K_OF);
    TableColumn();
    label_30:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 95:
        ;
        break;
      default:
        jj_la1[118] = jj_gen;
        break label_30;
      }
      jj_consume_token(95);
      TableColumn();
    }
  }

  static final public void SQLExpression() throws ParseException {
    SQLAndExpression();
    label_31:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_OR:
        ;
        break;
      default:
        jj_la1[119] = jj_gen;
        break label_31;
      }
      jj_consume_token(K_OR);
      SQLAndExpression();
    }
  }

  static final public void SQLAndExpression() throws ParseException {
    SQLUnaryLogicalExpression();
    label_32:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_AND:
        ;
        break;
      default:
        jj_la1[120] = jj_gen;
        break label_32;
      }
      jj_consume_token(K_AND);
      SQLUnaryLogicalExpression();
    }
  }

  static final public void SQLUnaryLogicalExpression() throws ParseException {
    if (jj_2_14(2)) {
      ExistsClause();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_NULL:
      case K_NOT:
      case K_PRIOR:
      case S_NUMBER:
      case S_IDENTIFIER:
      case S_BIND:
      case S_CHAR_LITERAL:
      case S_QUOTED_IDENTIFIER:
      case 93:
      case 106:
      case 107:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_NOT:
          jj_consume_token(K_NOT);
          break;
        default:
          jj_la1[121] = jj_gen;
          ;
        }
        SQLRelationalExpression();
        break;
      default:
        jj_la1[122] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void ExistsClause() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NOT:
      jj_consume_token(K_NOT);
      break;
    default:
      jj_la1[123] = jj_gen;
      ;
    }
    jj_consume_token(K_EXISTS);
    jj_consume_token(93);
    SubQuery();
    jj_consume_token(94);
  }

  static final public void SQLRelationalExpression() throws ParseException {
    if (jj_2_15(2147483647)) {
      jj_consume_token(93);
      SQLExpressionList();
      jj_consume_token(94);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_NULL:
      case K_PRIOR:
      case S_NUMBER:
      case S_IDENTIFIER:
      case S_BIND:
      case S_CHAR_LITERAL:
      case S_QUOTED_IDENTIFIER:
      case 93:
      case 106:
      case 107:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_PRIOR:
          jj_consume_token(K_PRIOR);
          break;
        default:
          jj_la1[124] = jj_gen;
          ;
        }
        SQLSimpleExpression();
        break;
      default:
        jj_la1[125] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_IN:
    case K_BETWEEN:
    case K_LIKE:
    case K_NOT:
    case K_IS:
    case 97:
    case 98:
    case 100:
    case 104:
    case 105:
      if (jj_2_16(2)) {
        SQLRelationalOperatorExpression();
      } else if (jj_2_17(2)) {
        SQLInClause();
      } else if (jj_2_18(2)) {
        SQLBetweenClause();
      } else if (jj_2_19(2)) {
        SQLLikeClause();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_IS:
          IsNullClause();
          break;
        default:
          jj_la1[126] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    default:
      jj_la1[127] = jj_gen;
      ;
    }
  }

  static final public void IsNullClause() throws ParseException {
    jj_consume_token(K_IS);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NOT:
      jj_consume_token(K_NOT);
      break;
    default:
      jj_la1[128] = jj_gen;
      ;
    }
    jj_consume_token(K_NULL);
  }

  static final public void SQLExpressionList() throws ParseException {
    SQLSimpleExpression();
    label_33:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 95:
        ;
        break;
      default:
        jj_la1[129] = jj_gen;
        break label_33;
      }
      jj_consume_token(95);
      SQLSimpleExpression();
    }
  }

  static final public void SQLRelationalOperatorExpression() throws ParseException {
    ComparisonOperator();
    if (jj_2_20(2147483647)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ANY:
      case K_ALL:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_ALL:
          jj_consume_token(K_ALL);
          break;
        case K_ANY:
          jj_consume_token(K_ANY);
          break;
        default:
          jj_la1[130] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[131] = jj_gen;
        ;
      }
      jj_consume_token(93);
      SubQuery();
      jj_consume_token(94);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_NULL:
      case K_PRIOR:
      case S_NUMBER:
      case S_IDENTIFIER:
      case S_BIND:
      case S_CHAR_LITERAL:
      case S_QUOTED_IDENTIFIER:
      case 93:
      case 106:
      case 107:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_PRIOR:
          jj_consume_token(K_PRIOR);
          break;
        default:
          jj_la1[132] = jj_gen;
          ;
        }
        SQLSimpleExpression();
        break;
      default:
        jj_la1[133] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void SQLInClause() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NOT:
      jj_consume_token(K_NOT);
      break;
    default:
      jj_la1[134] = jj_gen;
      ;
    }
    jj_consume_token(K_IN);
    jj_consume_token(93);
    if (jj_2_21(2)) {
      SQLExpressionList();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_SELECT:
        SubQuery();
        break;
      default:
        jj_la1[135] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(94);
  }

  static final public void SQLBetweenClause() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NOT:
      jj_consume_token(K_NOT);
      break;
    default:
      jj_la1[136] = jj_gen;
      ;
    }
    jj_consume_token(K_BETWEEN);
    SQLSimpleExpression();
    jj_consume_token(K_AND);
    SQLSimpleExpression();
  }

  static final public void SQLLikeClause() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NOT:
      jj_consume_token(K_NOT);
      break;
    default:
      jj_la1[137] = jj_gen;
      ;
    }
    jj_consume_token(K_LIKE);
    SQLSimpleExpression();
  }

  static final public void SQLSimpleExpression() throws ParseException {
    SQLMultiplicativeExpression();
    label_34:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 106:
      case 107:
      case 109:
        ;
        break;
      default:
        jj_la1[138] = jj_gen;
        break label_34;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 106:
        jj_consume_token(106);
        break;
      case 107:
        jj_consume_token(107);
        break;
      case 109:
        jj_consume_token(109);
        break;
      default:
        jj_la1[139] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      SQLMultiplicativeExpression();
    }
  }

  static final public void SQLMultiplicativeExpression() throws ParseException {
    SQLExpotentExpression();
    label_35:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 103:
      case 110:
        ;
        break;
      default:
        jj_la1[140] = jj_gen;
        break label_35;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 103:
        jj_consume_token(103);
        break;
      case 110:
        jj_consume_token(110);
        break;
      default:
        jj_la1[141] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      SQLExpotentExpression();
    }
  }

  static final public void SQLExpotentExpression() throws ParseException {
    SQLUnaryExpression();
    label_36:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 111:
        ;
        break;
      default:
        jj_la1[142] = jj_gen;
        break label_36;
      }
      jj_consume_token(111);
      SQLUnaryExpression();
    }
  }

  static final public void SQLUnaryExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 106:
    case 107:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 106:
        jj_consume_token(106);
        break;
      case 107:
        jj_consume_token(107);
        break;
      default:
        jj_la1[143] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[144] = jj_gen;
      ;
    }
    SQLPrimaryExpression();
  }

  static final public void SQLPrimaryExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NULL:
      jj_consume_token(K_NULL);
      break;
    default:
      jj_la1[145] = jj_gen;
      if (jj_2_22(2147483647)) {
        FunctionCall();
      } else if (jj_2_23(2147483647)) {
        OuterJoinExpression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S_IDENTIFIER:
        case S_QUOTED_IDENTIFIER:
          TableColumn();
          break;
        case S_NUMBER:
          jj_consume_token(S_NUMBER);
          break;
        case S_CHAR_LITERAL:
          jj_consume_token(S_CHAR_LITERAL);
          break;
        case S_BIND:
          jj_consume_token(S_BIND);
          break;
        case 93:
          jj_consume_token(93);
          SQLExpression();
          jj_consume_token(94);
          break;
        default:
          jj_la1[146] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  static final public void FunctionCall() throws ParseException {
    OracleObjectName();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 99:
      jj_consume_token(99);
      OracleObjectName();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 99:
        jj_consume_token(99);
        OracleObjectName();
        break;
      default:
        jj_la1[147] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[148] = jj_gen;
      ;
    }
    jj_consume_token(93);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NULL:
    case K_DISTINCT:
    case K_ALL:
    case S_NUMBER:
    case S_IDENTIFIER:
    case S_BIND:
    case S_CHAR_LITERAL:
    case S_QUOTED_IDENTIFIER:
    case 93:
    case 103:
    case 106:
    case 107:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_DISTINCT:
      case K_ALL:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_DISTINCT:
          jj_consume_token(K_DISTINCT);
          break;
        case K_ALL:
          jj_consume_token(K_ALL);
          break;
        default:
          jj_la1[149] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[150] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_NULL:
      case S_NUMBER:
      case S_IDENTIFIER:
      case S_BIND:
      case S_CHAR_LITERAL:
      case S_QUOTED_IDENTIFIER:
      case 93:
      case 106:
      case 107:
        SQLArguments();
        break;
      case 103:
        jj_consume_token(103);
        break;
      default:
        jj_la1[151] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[152] = jj_gen;
      ;
    }
    jj_consume_token(94);
  }

  static final public void SQLArguments() throws ParseException {
    SQLExpressionList();
  }

  static final public void Join() throws ParseException {
    JoinType();
    jj_consume_token(K_JOIN);
    TableReference();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_ON:
      jj_consume_token(K_ON);
      SQLExpression();
      break;
    case K_USING:
      jj_consume_token(K_USING);
      jj_consume_token(93);
      TableColumn();
      label_37:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 95:
          ;
          break;
        default:
          jj_la1[153] = jj_gen;
          break label_37;
        }
        jj_consume_token(95);
        TableColumn();
      }
      jj_consume_token(94);
      break;
    default:
      jj_la1[154] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void JoinType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_INNER:
      jj_consume_token(K_INNER);
      break;
    case K_FULL:
    case K_LEFT:
    case K_RIGHT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_LEFT:
        jj_consume_token(K_LEFT);
        break;
      case K_RIGHT:
        jj_consume_token(K_RIGHT);
        break;
      case K_FULL:
        jj_consume_token(K_FULL);
        break;
      default:
        jj_la1[155] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(K_OUTER);
      break;
    default:
      jj_la1[156] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void OuterJoinExpression() throws ParseException {
    OracleObjectName();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 99:
      jj_consume_token(99);
      OracleObjectName();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 99:
        jj_consume_token(99);
        OracleObjectName();
        break;
      default:
        jj_la1[157] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[158] = jj_gen;
      ;
    }
    jj_consume_token(93);
    jj_consume_token(106);
    jj_consume_token(94);
  }

  static final public void SubQuery() throws ParseException {
    SelectWithoutOrder();
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  static private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  static private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  static private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  static private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  static private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  static private boolean jj_3R_137() {
    if (jj_scan_token(K_ROLLUP)) return true;
    if (jj_scan_token(101)) return true;
    if (jj_3R_140()) return true;
    if (jj_scan_token(102)) return true;
    if (jj_scan_token(93)) return true;
    if (jj_3R_141()) return true;
    if (jj_scan_token(94)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_142()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_59() {
    if (jj_3R_69()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_70()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_178() {
    if (jj_scan_token(S_NUMBER)) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_3R_43()) return true;
    if (jj_scan_token(99)) return true;
    return false;
  }

  static private boolean jj_3R_188() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) jj_scanpos = xsp;
    if (jj_3R_153()) return true;
    if (jj_scan_token(99)) return true;
    if (jj_3R_154()) return true;
    if (jj_scan_token(99)) return true;
    if (jj_3R_193()) return true;
    return false;
  }

  static private boolean jj_3R_186() {
    if (jj_3R_184()) return true;
    return false;
  }

  static private boolean jj_3R_52() {
    if (jj_scan_token(93)) return true;
    if (jj_scan_token(K_SELECT)) return true;
    return false;
  }

  static private boolean jj_3_21() {
    if (jj_3R_53()) return true;
    return false;
  }

  static private boolean jj_3R_46() {
    if (jj_3R_59()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_60()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_3R_43()) return true;
    if (jj_scan_token(99)) return true;
    return false;
  }

  static private boolean jj_3R_176() {
    if (jj_3R_184()) return true;
    return false;
  }

  static private boolean jj_3R_174() {
    if (jj_scan_token(93)) return true;
    if (jj_3R_42()) return true;
    if (jj_scan_token(94)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_182()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_43() {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_51() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(71)) jj_scanpos = xsp;
    if (jj_scan_token(K_LIKE)) return true;
    if (jj_3R_46()) return true;
    return false;
  }

  static private boolean jj_3R_170() {
    if (jj_scan_token(95)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) jj_scanpos = xsp;
    if (jj_3R_68()) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_43()) return true;
    if (jj_scan_token(99)) return true;
    return false;
  }

  static private boolean jj_3R_50() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(71)) jj_scanpos = xsp;
    if (jj_scan_token(K_BETWEEN)) return true;
    if (jj_3R_46()) return true;
    if (jj_scan_token(K_AND)) return true;
    if (jj_3R_46()) return true;
    return false;
  }

  static private boolean jj_3R_149() {
    if (jj_3R_42()) return true;
    return false;
  }

  static private boolean jj_3R_179() {
    if (jj_scan_token(S_CHAR_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(56)) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) {
    jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_162() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) jj_scanpos = xsp;
    if (jj_3R_68()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_170()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_156() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_162()) {
    jj_scanpos = xsp;
    if (jj_scan_token(103)) return true;
    }
    return false;
  }

  static private boolean jj_3R_64() {
    if (jj_scan_token(95)) return true;
    if (jj_3R_46()) return true;
    return false;
  }

  static private boolean jj_3R_203() {
    if (jj_scan_token(95)) return true;
    if (jj_3R_189()) return true;
    return false;
  }

  static private boolean jj_3R_185() {
    if (jj_3R_183()) return true;
    return false;
  }

  static private boolean jj_3R_49() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(71)) jj_scanpos = xsp;
    if (jj_scan_token(K_IN)) return true;
    if (jj_scan_token(93)) return true;
    xsp = jj_scanpos;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3R_122()) return true;
    }
    if (jj_scan_token(94)) return true;
    return false;
  }

  static private boolean jj_3R_106() {
    if (jj_3R_114()) return true;
    return false;
  }

  static private boolean jj_3_19() {
    if (jj_3R_51()) return true;
    return false;
  }

  static private boolean jj_3_18() {
    if (jj_3R_50()) return true;
    return false;
  }

  static private boolean jj_3R_183() {
    if (jj_3R_188()) return true;
    if (jj_3R_61()) return true;
    if (jj_3R_189()) return true;
    return false;
  }

  static private boolean jj_3R_77() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(57)) {
    jj_scanpos = xsp;
    if (jj_scan_token(56)) return true;
    }
    return false;
  }

  static private boolean jj_3R_63() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(73)) jj_scanpos = xsp;
    if (jj_3R_46()) return true;
    return false;
  }

  static private boolean jj_3_17() {
    if (jj_3R_49()) return true;
    return false;
  }

  static private boolean jj_3R_181() {
    if (jj_3R_43()) return true;
    return false;
  }

  static private boolean jj_3R_62() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_77()) jj_scanpos = xsp;
    if (jj_scan_token(93)) return true;
    if (jj_3R_103()) return true;
    if (jj_scan_token(94)) return true;
    return false;
  }

  static private boolean jj_3R_177() {
    if (jj_scan_token(K_AND)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_185()) {
    jj_scanpos = xsp;
    if (jj_3R_186()) return true;
    }
    return false;
  }

  static private boolean jj_3R_175() {
    if (jj_3R_183()) return true;
    return false;
  }

  static private boolean jj_3R_201() {
    if (jj_3R_189()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_203()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_165() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_175()) {
    jj_scanpos = xsp;
    if (jj_3R_176()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_177()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_48() {
    if (jj_3R_61()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) return true;
    }
    return false;
  }

  static private boolean jj_3R_148() {
    if (jj_3R_155()) return true;
    return false;
  }

  static private boolean jj_3R_141() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_148()) {
    jj_scanpos = xsp;
    if (jj_3R_149()) return true;
    }
    return false;
  }

  static private boolean jj_3R_202() {
    if (jj_scan_token(95)) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  static private boolean jj_3R_158() {
    if (jj_3R_164()) return true;
    return false;
  }

  static private boolean jj_3R_171() {
    if (jj_3R_180()) return true;
    return false;
  }

  static private boolean jj_3R_53() {
    if (jj_3R_46()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_64()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_173() {
    if (jj_3R_155()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_181()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_164() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_173()) {
    jj_scanpos = xsp;
    if (jj_3R_174()) return true;
    }
    return false;
  }

  static private boolean jj_3R_114() {
    if (jj_scan_token(K_IS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(71)) jj_scanpos = xsp;
    if (jj_scan_token(K_NULL)) return true;
    return false;
  }

  static private boolean jj_3R_40() {
    if (jj_3R_57()) return true;
    if (jj_scan_token(93)) return true;
    if (jj_3R_201()) return true;
    if (jj_scan_token(94)) return true;
    return false;
  }

  static private boolean jj_3R_163() {
    if (jj_scan_token(K_DICE)) return true;
    if (jj_scan_token(101)) return true;
    if (jj_3R_171()) return true;
    if (jj_scan_token(102)) return true;
    if (jj_scan_token(93)) return true;
    if (jj_3R_141()) return true;
    if (jj_scan_token(94)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_172()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_157() {
    if (jj_3R_163()) return true;
    return false;
  }

  static private boolean jj_3_15() {
    if (jj_scan_token(93)) return true;
    if (jj_3R_46()) return true;
    if (jj_scan_token(95)) return true;
    return false;
  }

  static private boolean jj_3R_98() {
    if (jj_scan_token(K_AND)) return true;
    if (jj_3R_96()) return true;
    return false;
  }

  static private boolean jj_3_16() {
    if (jj_3R_48()) return true;
    return false;
  }

  static private boolean jj_3R_104() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_159() {
    if (jj_scan_token(K_WHERE)) return true;
    if (jj_3R_165()) return true;
    return false;
  }

  static private boolean jj_3R_200() {
    if (jj_3R_40()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_202()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_102() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(73)) jj_scanpos = xsp;
    if (jj_3R_46()) return true;
    return false;
  }

  static private boolean jj_3R_101() {
    if (jj_scan_token(93)) return true;
    if (jj_3R_53()) return true;
    if (jj_scan_token(94)) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    if (jj_scan_token(K_SELECT)) return true;
    if (jj_scan_token(K_MULTILEVEL)) return true;
    if (jj_3R_156()) return true;
    if (jj_scan_token(K_FROM)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_157()) {
    jj_scanpos = xsp;
    if (jj_3R_158()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_159()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_100() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_104()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_42()) return true;
    return false;
  }

  static private boolean jj_3R_95() {
    if (jj_scan_token(K_OR)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  static private boolean jj_3R_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(71)) jj_scanpos = xsp;
    if (jj_scan_token(K_EXISTS)) return true;
    if (jj_scan_token(93)) return true;
    if (jj_3R_103()) return true;
    if (jj_scan_token(94)) return true;
    return false;
  }

  static private boolean jj_3R_99() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(71)) jj_scanpos = xsp;
    if (jj_3R_100()) return true;
    return false;
  }

  static private boolean jj_3_14() {
    if (jj_3R_47()) return true;
    return false;
  }

  static private boolean jj_3R_96() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) return true;
    }
    return false;
  }

  static private boolean jj_3R_39() {
    if (jj_3R_57()) return true;
    if (jj_scan_token(93)) return true;
    if (jj_3R_200()) return true;
    if (jj_scan_token(94)) return true;
    return false;
  }

  static private boolean jj_3R_94() {
    if (jj_3R_96()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_98()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_40()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_39()) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_38()) return true;
    return false;
  }

  static private boolean jj_3R_195() {
    if (jj_3R_178()) return true;
    return false;
  }

  static private boolean jj_3R_92() {
    if (jj_3R_94()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_95()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_194() {
    if (jj_3R_179()) return true;
    return false;
  }

  static private boolean jj_3R_189() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_194()) {
    jj_scanpos = xsp;
    if (jj_3R_195()) {
    jj_scanpos = xsp;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3_3()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_13() {
    if (jj_scan_token(93)) return true;
    return false;
  }

  static private boolean jj_3R_133() {
    if (jj_3R_105()) return true;
    return false;
  }

  static private boolean jj_3R_132() {
    if (jj_scan_token(93)) return true;
    if (jj_3R_105()) return true;
    if (jj_scan_token(94)) return true;
    return false;
  }

  static private boolean jj_3R_131() {
    if (jj_scan_token(K_UNION)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(57)) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_121() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_131()) {
    jj_scanpos = xsp;
    if (jj_scan_token(66)) {
    jj_scanpos = xsp;
    if (jj_scan_token(65)) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_132()) {
    jj_scanpos = xsp;
    if (jj_3R_133()) return true;
    }
    return false;
  }

  static private boolean jj_3R_130() {
    if (jj_scan_token(K_HAVING)) return true;
    if (jj_3R_92()) return true;
    return false;
  }

  static private boolean jj_3R_120() {
    if (jj_scan_token(K_GROUP)) return true;
    if (jj_scan_token(K_BY)) return true;
    if (jj_3R_53()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_130()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_129() {
    if (jj_scan_token(K_START)) return true;
    if (jj_scan_token(K_WITH)) return true;
    if (jj_3R_92()) return true;
    return false;
  }

  static private boolean jj_3R_128() {
    if (jj_scan_token(K_START)) return true;
    if (jj_scan_token(K_WITH)) return true;
    if (jj_3R_92()) return true;
    return false;
  }

  static private boolean jj_3R_119() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_128()) jj_scanpos = xsp;
    if (jj_scan_token(K_CONNECT)) return true;
    if (jj_scan_token(K_BY)) return true;
    if (jj_3R_92()) return true;
    xsp = jj_scanpos;
    if (jj_3R_129()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_118() {
    if (jj_scan_token(K_WHERE)) return true;
    if (jj_3R_92()) return true;
    return false;
  }

  static private boolean jj_3R_57() {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_136() {
    if (jj_3R_139()) return true;
    return false;
  }

  static private boolean jj_3R_117() {
    if (jj_scan_token(95)) return true;
    if (jj_3R_116()) return true;
    return false;
  }

  static private boolean jj_3R_127() {
    if (jj_3R_137()) return true;
    return false;
  }

  static private boolean jj_3R_126() {
    if (jj_scan_token(93)) return true;
    if (jj_3R_103()) return true;
    if (jj_scan_token(94)) return true;
    return false;
  }

  static private boolean jj_3R_125() {
    if (jj_3R_135()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_136()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_116() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_125()) {
    jj_scanpos = xsp;
    if (jj_3R_126()) {
    jj_scanpos = xsp;
    if (jj_3R_127()) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(87)) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_124() {
    if (jj_scan_token(95)) return true;
    if (jj_3R_123()) return true;
    return false;
  }

  static private boolean jj_3R_109() {
    if (jj_scan_token(K_FROM)) return true;
    if (jj_3R_116()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_117()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_134() {
    if (jj_scan_token(93)) return true;
    if (jj_3R_103()) return true;
    if (jj_scan_token(94)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(87)) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_12() {
    if (jj_3R_46()) return true;
    return false;
  }

  static private boolean jj_3_11() {
    if (jj_3R_45()) return true;
    if (jj_scan_token(99)) return true;
    if (jj_3R_45()) return true;
    if (jj_scan_token(108)) return true;
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_3R_45()) return true;
    if (jj_scan_token(108)) return true;
    return false;
  }

  static private boolean jj_3R_115() {
    if (jj_3R_123()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_124()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_123() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3R_134()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_68() {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_108() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(103)) {
    jj_scanpos = xsp;
    if (jj_3R_115()) return true;
    }
    return false;
  }

  static private boolean jj_3R_113() {
    if (jj_3R_121()) return true;
    return false;
  }

  static private boolean jj_3R_112() {
    if (jj_3R_120()) return true;
    return false;
  }

  static private boolean jj_3R_111() {
    if (jj_3R_119()) return true;
    return false;
  }

  static private boolean jj_3R_110() {
    if (jj_3R_118()) return true;
    return false;
  }

  static private boolean jj_3R_107() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(57)) {
    jj_scanpos = xsp;
    if (jj_scan_token(55)) return true;
    }
    return false;
  }

  static private boolean jj_3R_105() {
    if (jj_scan_token(K_SELECT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_107()) jj_scanpos = xsp;
    if (jj_3R_108()) return true;
    if (jj_3R_109()) return true;
    xsp = jj_scanpos;
    if (jj_3R_110()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_111()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_112()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_113()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_97() {
    if (jj_scan_token(99)) return true;
    if (jj_3R_45()) return true;
    return false;
  }

  static private boolean jj_3R_155() {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_187() {
    if (jj_3R_192()) return true;
    return false;
  }

  static private boolean jj_3R_198() {
    if (jj_scan_token(95)) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  static private boolean jj_3R_193() {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_138() {
    if (jj_scan_token(99)) return true;
    if (jj_3R_45()) return true;
    return false;
  }

  static private boolean jj_3R_199() {
    if (jj_scan_token(95)) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  static private boolean jj_3R_152() {
    if (jj_scan_token(95)) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  static private boolean jj_3R_93() {
    if (jj_scan_token(99)) return true;
    if (jj_3R_45()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_97()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_135() {
    if (jj_3R_45()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_138()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_154() {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_45() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(87)) {
    jj_scanpos = xsp;
    if (jj_scan_token(92)) return true;
    }
    return false;
  }

  static private boolean jj_3R_41() {
    if (jj_3R_38()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_198()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_91() {
    if (jj_3R_45()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_93()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_192() {
    if (jj_3R_56()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_199()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_145() {
    if (jj_scan_token(K_USING)) return true;
    if (jj_scan_token(93)) return true;
    if (jj_3R_91()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_152()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(94)) return true;
    return false;
  }

  static private boolean jj_3R_81() {
    if (jj_scan_token(99)) return true;
    if (jj_3R_45()) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3R_180() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_187()) return true;
    }
    return false;
  }

  static private boolean jj_3R_56() {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_76() {
    if (jj_scan_token(K_LIKE)) return true;
    return false;
  }

  static private boolean jj_3R_75() {
    if (jj_scan_token(105)) return true;
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_3R_56()) return true;
    if (jj_scan_token(K_IN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(13)) jj_scanpos = xsp;
    if (jj_3R_153()) return true;
    return false;
  }

  static private boolean jj_3R_144() {
    if (jj_scan_token(K_ON)) return true;
    if (jj_3R_92()) return true;
    return false;
  }

  static private boolean jj_3R_74() {
    if (jj_scan_token(97)) return true;
    return false;
  }

  static private boolean jj_3R_67() {
    if (jj_scan_token(99)) return true;
    if (jj_3R_45()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_81()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_78() {
    if (jj_scan_token(99)) return true;
    if (jj_3R_45()) return true;
    return false;
  }

  static private boolean jj_3R_73() {
    if (jj_scan_token(104)) return true;
    return false;
  }

  static private boolean jj_3R_72() {
    if (jj_scan_token(98)) return true;
    return false;
  }

  static private boolean jj_3R_71() {
    if (jj_scan_token(100)) return true;
    return false;
  }

  static private boolean jj_3R_61() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_103() {
    if (jj_3R_105()) return true;
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_scan_token(95)) return true;
    if (jj_3R_44()) return true;
    return false;
  }

  static private boolean jj_3R_80() {
    if (jj_3R_84()) return true;
    return false;
  }

  static private boolean jj_3R_153() {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_191() {
    if (jj_3R_155()) return true;
    return false;
  }

  static private boolean jj_3R_55() {
    if (jj_3R_45()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_67()) jj_scanpos = xsp;
    if (jj_scan_token(93)) return true;
    if (jj_scan_token(106)) return true;
    if (jj_scan_token(94)) return true;
    return false;
  }

  static private boolean jj_3R_197() {
    if (jj_3R_38()) return true;
    return false;
  }

  static private boolean jj_3R_166() {
    if (jj_scan_token(95)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  static private boolean jj_3R_65() {
    if (jj_scan_token(99)) return true;
    if (jj_3R_45()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_78()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_196() {
    if (jj_3R_179()) return true;
    return false;
  }

  static private boolean jj_3R_190() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_196()) {
    jj_scanpos = xsp;
    if (jj_3R_197()) return true;
    }
    return false;
  }

  static private boolean jj_3R_151() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_scan_token(80)) {
    jj_scanpos = xsp;
    if (jj_scan_token(78)) return true;
    }
    }
    if (jj_scan_token(K_OUTER)) return true;
    return false;
  }

  static private boolean jj_3R_143() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(81)) {
    jj_scanpos = xsp;
    if (jj_3R_151()) return true;
    }
    return false;
  }

  static private boolean jj_3R_184() {
    if (jj_scan_token(K_CONVERT_TO)) return true;
    if (jj_scan_token(93)) return true;
    if (jj_3R_188()) return true;
    if (jj_scan_token(95)) return true;
    if (jj_3R_190()) return true;
    if (jj_scan_token(95)) return true;
    if (jj_3R_191()) return true;
    if (jj_scan_token(94)) return true;
    if (jj_3R_61()) return true;
    if (jj_3R_189()) return true;
    return false;
  }

  static private boolean jj_3R_139() {
    if (jj_3R_143()) return true;
    if (jj_scan_token(K_JOIN)) return true;
    if (jj_3R_135()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_144()) {
    jj_scanpos = xsp;
    if (jj_3R_145()) return true;
    }
    return false;
  }

  static private boolean jj_3R_79() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) return true;
    }
    return false;
  }

  static private boolean jj_3R_161() {
    if (jj_3R_155()) return true;
    return false;
  }

  static private boolean jj_3R_66() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_79()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_scan_token(103)) return true;
    }
    return false;
  }

  static private boolean jj_3R_84() {
    if (jj_3R_53()) return true;
    return false;
  }

  static private boolean jj_3R_169() {
    if (jj_3R_38()) return true;
    return false;
  }

  static private boolean jj_3R_168() {
    if (jj_3R_179()) return true;
    return false;
  }

  static private boolean jj_3R_54() {
    if (jj_3R_45()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_65()) jj_scanpos = xsp;
    if (jj_scan_token(93)) return true;
    xsp = jj_scanpos;
    if (jj_3R_66()) jj_scanpos = xsp;
    if (jj_scan_token(94)) return true;
    return false;
  }

  static private boolean jj_3R_167() {
    if (jj_3R_178()) return true;
    return false;
  }

  static private boolean jj_3R_160() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_167()) {
    jj_scanpos = xsp;
    if (jj_3R_168()) {
    jj_scanpos = xsp;
    if (jj_3R_169()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_58() {
    if (jj_3R_68()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_166()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_23() {
    if (jj_3R_55()) return true;
    return false;
  }

  static private boolean jj_3_22() {
    if (jj_3R_54()) return true;
    return false;
  }

  static private boolean jj_3R_147() {
    if (jj_scan_token(95)) return true;
    if (jj_3R_146()) return true;
    return false;
  }

  static private boolean jj_3R_44() {
    if (jj_3R_58()) return true;
    if (jj_scan_token(K_TO)) return true;
    if (jj_3R_160()) return true;
    if (jj_scan_token(K_USING)) return true;
    if (jj_3R_161()) return true;
    return false;
  }

  static private boolean jj_3R_83() {
    if (jj_scan_token(111)) return true;
    if (jj_3R_82()) return true;
    return false;
  }

  static private boolean jj_3R_122() {
    if (jj_3R_103()) return true;
    return false;
  }

  static private boolean jj_3R_90() {
    if (jj_scan_token(93)) return true;
    if (jj_3R_92()) return true;
    if (jj_scan_token(94)) return true;
    return false;
  }

  static private boolean jj_3R_70() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(103)) {
    jj_scanpos = xsp;
    if (jj_scan_token(110)) return true;
    }
    if (jj_3R_69()) return true;
    return false;
  }

  static private boolean jj_3R_60() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(106)) {
    jj_scanpos = xsp;
    if (jj_scan_token(107)) {
    jj_scanpos = xsp;
    if (jj_scan_token(109)) return true;
    }
    }
    if (jj_3R_59()) return true;
    return false;
  }

  static private boolean jj_3R_150() {
    if (jj_scan_token(K_CONVERT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(32)) jj_scanpos = xsp;
    if (jj_3R_44()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_9()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_89() {
    if (jj_3R_91()) return true;
    return false;
  }

  static private boolean jj_3R_88() {
    if (jj_3R_55()) return true;
    return false;
  }

  static private boolean jj_3R_87() {
    if (jj_3R_54()) return true;
    return false;
  }

  static private boolean jj_3R_86() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(26)) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) {
    jj_scanpos = xsp;
    if (jj_scan_token(91)) {
    jj_scanpos = xsp;
    if (jj_scan_token(90)) {
    jj_scanpos = xsp;
    if (jj_3R_90()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_182() {
    if (jj_3R_43()) return true;
    return false;
  }

  static private boolean jj_3R_146() {
    if (jj_3R_153()) return true;
    if (jj_scan_token(99)) return true;
    if (jj_3R_154()) return true;
    return false;
  }

  static private boolean jj_3R_85() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(106)) {
    jj_scanpos = xsp;
    if (jj_scan_token(107)) return true;
    }
    return false;
  }

  static private boolean jj_3R_82() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_85()) jj_scanpos = xsp;
    if (jj_3R_86()) return true;
    return false;
  }

  static private boolean jj_3R_172() {
    if (jj_3R_43()) return true;
    return false;
  }

  static private boolean jj_3R_140() {
    if (jj_3R_146()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_147()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_142() {
    if (jj_3R_150()) return true;
    return false;
  }

  static private boolean jj_3R_69() {
    if (jj_3R_82()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_83()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public SQLMParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[159];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1e00,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000,0x100000,0x2000,0x0,0x0,0x0,0x0,0x0,0x40000,0x0,0x1e00,0x1e00,0xe00,0x22000,0x400000,0x800000,0x4000,0x0,0x0,0x0,0x4000000,0x0,0xc8000,0x10000,0x4000,0x0,0x0,0x0,0x0,0x88000,0x40000800,0x40000800,0x80000000,0x80000000,0x0,0x400000,0x40000800,0x40000800,0x0,0x0,0x0,0x20000000,0x22000,0xc8000,0x88000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000000,0x0,0x0,0x4000000,0x0,0x10100000,0x0,0x0,0x0,0x0,0x0,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000000,0x0,0x0,0x0,0x0,0x0,0x4000000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x400,0x600000,0x0,0x0,0x0,0x0,0x0,0x1f0,0x1f0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400,0x400,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0xc,0xc,0x0,0xc,0xc,0x200,0x200,0x0,0x0,0x400,0x4000,0x1000,0x0,0x0,0x0,0x0,0x400,0x40000,0x80000,0x40000,0x0,0x0,0x10000,0x0,0x1,0x0,0x0,0x0,0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x2800000,0x2800000,0x1000,0xc000000,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000,0x0,0x4000000,0x4000000,0x0,0x2000000,0x0,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x100000,0x80000,0x0,0x0,0x0,0x0,0x0,0x0,0x2000,0x0,0x0,0x3000000,0x3000000,0x0,0x0,0x0,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2800000,0x2800000,0x0,0x2800000,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x800000,0x80000000,0x20000000,0x8080000,0x80000000,0x80000000,0x8880000,0x0,0x0,0x0,0x0,0x800000,0x80000000,0x80000000,0x80000000,0x20800000,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x20000000,0x20800000,0x80000000,0x0,0x0,0x0,0x0,0x80000000,0x20000000,0x80000000,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x80000000,0x0,0x20800000,0x0,0x800000,0x800000,0x800000,0x20800000,0x800000,0x800000,0x0,0x800000,0x80000000,0x800000,0x0,0x80000000,0x0,0x80000000,0x8880000,0x8800000,0x0,0x0,0x0,0x10800000,0x0,0x0,0x0,0x880000,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0xe,0x80000000,0x3c880000,0x800000,0x20000000,0x80000000,0x3c000,0x30800000,0x800000,0x0,0x0,0x1,0x0,0xe,0x0,0x30,0x30,0x80000000,0x30,0x30,0x80000000,0x0,0x0,0x80,0x3c880280,0x80,0x200,0x3c880200,0x400,0x480,0x80,0x80000000,0x0,0x0,0x200,0x3c880200,0x80,0x0,0x80,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3c880000,0x0,0x0,0x0,0x0,0x3c880000,0x3c880000,0x80000000,0x3000,0x1c000,0x3c000,0x0,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x316,0x8,0x8,0x0,0x8,0xc00,0xc00,0xc00,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc00,0x0,0x0,0xc00,0x0,0x316,0x0,0x0,0x0,0x0,0x0,0xc00,0x0,0x0,0x0,0x0,0x2c00,0x2c00,0x4080,0x4080,0x8000,0xc00,0xc00,0x0,0x0,0x8,0x8,0x0,0x0,0xc80,0xc80,0x0,0x0,0x0,0x0,0x8,0x8,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[23];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public SQLMParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SQLMParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SQLMParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 159; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 159; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public SQLMParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SQLMParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 159; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 159; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public SQLMParser(SQLMParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 159; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(SQLMParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 159; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[112];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 159; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 112; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 23; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
